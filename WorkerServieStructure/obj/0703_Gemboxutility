using GemBox.Document;
using GemBox.Pdf;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using System.Diagnostics;
using System.Threading.Tasks;
using WorkerService.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text.Json;
using WorkerService.DTOs;
using System.Collections.Concurrent;
using Microsoft.ApplicationInsights.WorkerService;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Timers;
using static Microsoft.ApplicationInsights.MetricDimensionNames.TelemetryContext;
using System.Linq.Expressions;

namespace WorkerService
{
    public class GemboxUtility
    {
        private ActivityLogging _logger;
        private readonly DocumentProcessorContext _context;
        public GemboxUtility(DocumentProcessorContext context)
        {
            GemBox.Document.ComponentInfo.SetLicense(CommonConstants.LicenceKeyFree);
            GemBox.Pdf.ComponentInfo.SetLicense(CommonConstants.LicenceKeyFree);
            _context = context;
        }

        public void ConvertAndMergeFilesToPDF(string folderName, Guid workerId, bool deleteSource = false)
        {
            string sourceRoot = "SourceFolder";
            string targetRoot = "TargetFolder";
            string combinedFileName = "Combined.pdf";
            var workerNodeID = workerId; //GetWorkerNodebyId(workerID);
            var subjectDirectory = Path.Combine(sourceRoot, folderName);

            try
            {
                if (Directory.Exists(subjectDirectory))
                {
                    var foldersToCombine = Directory.EnumerateDirectories(subjectDirectory);
                    foreach (var folderToCombine in foldersToCombine)
                    {
                        //var workerNode = new WorkerNode
                        //{
                        WorkerID = workerNodeID,
                        WorkingfolderName = Path.GetFileName(folderToCombine), //string.Empty,
                        WorkingSubFolder = Path.GetFileName(folderToCombine),
                        TaskAssignedDateTime = DateTime.Now,
                        LastActiveDateTime = DateTime.Now,
                        Status = true
                        //};

                        if (Directory.Exists(folderToCombine))
                        {
                            string[] FolderFiles = Directory.GetFiles(folderToCombine);
                            foreach (string FolderFile in FolderFiles)
                            {
                                var workerNode = new WorkerNode
                                {
                                    WorkerID = workerNodeID,
                                    WorkingfolderName = Path.GetFileName(folderName), //string.Empty,
                                    WorkingSubFolder = Path.GetFileName(folderToCombine),
                                    PriorFileName = Path.GetFileName(FolderFile),
                                    TaskAssignedDateTime = DateTime.Now,
                                    LastActiveDateTime = DateTime.Now,
                                    Status = true
                                };

                                _context.WorkerNode.Add(workerNode);
                                _context.SaveChanges();
                            }
                        }
                    }
                }
                else
                {
                    Console.WriteLine("The Specified Folder path does not exist.");
                    // _context.WorkerNode.Add(workerNode);
                    // _context.SaveChanges();
                }

                ConvertNonPdfFilesToPdf(folderToCombine);
                var pathParts = folderToCombine.Split(new char[] { '\\' });
                var combinedFolder = Path.Combine(targetRoot, pathParts[1], pathParts[2]);
                if (!Directory.Exists(combinedFolder))
                {
                    Directory.CreateDirectory(combinedFolder);
                }

                var files = Directory.EnumerateFiles(folderToCombine)
                    .Where(x => x.EndsWith(".pdf"))
                    .OrderBy(x => x)
                    .ToList();

                if (files.Count == 1)
                {
                    File.Copy(
                        Path.Combine(files.First()),
                        Path.Combine(combinedFolder, combinedFileName),
                        true);
                }
                else if (files.Count > 1)
                {
                    using (var document = new PdfDocument())
                    {
                        int fileCounter = 0;
                        int chunkSize = 50;

                        foreach (var fileName in files)
                        {
                            using (var source = PdfDocument.Load(fileName))
                            {
                                document.Pages.Kids.AddClone(source.Pages);
                            }

                            fileCounter++;
                            if (fileCounter % chunkSize == 0)
                            {
                                // Save the new pages that were added after the document was last saved.
                                document.Save();
                                // Clear previously parsed pages and thus free memory necessary for merging additional pages.
                                document.Unload();
                            }
                        }

                        document.Save(Path.Combine(combinedFolder, combinedFileName));
                    }
                }

                if (deleteSource)
                {
                    Directory.Delete(subjectDirectory, true);
                }
                else
                {
                    // _logger.Info($"The Source file could not be deleted because it does not exist");
                }
            }
            catch (Exception ex)
            {
                _logger.Error(ex, $"An exception occurred while validating the properties of the source file {sourceRoot}{targetRoot}");
            }
        }

        public void ConvertNonPdfFilesToPdf(string sourceDirectory)
        {
            try
            {
                var nonPdfFiles = Directory.EnumerateFiles(sourceDirectory)
                    .Where(x => !x.EndsWith(".pdf"))
                    .ToList();

                foreach (var nonPdfFile in nonPdfFiles)
                {
                    var outputFileName =  nonPdfFile.Split(".")[0] + ".pdf";
                    DocumentModel document = DocumentModel.Load(nonPdfFile);
                    document.Save(outputFileName);

                    // _logger.Info($"An exception occurred while converting the NonPdf files to Pdf of the source folder {sourceDirectory}");
                }
            }
            catch (Exception ex)
            {
                _logger.Error(ex, $"An exception occurred while validating the properties of the source file {sourceDirectory}");
            }
        }
    }
}
